-- Create the extension

-- Load the shared library (replace 'path_to_library' with the actual path to your compiled library)
CREATE FUNCTION load_global_var_extension() RETURNS void AS '$libdir/path_to_library/global_var', 'pg_extension_init';

-- Create the functions provided by the extension

-- Set global variable
CREATE OR REPLACE FUNCTION set_global_variable(value text) RETURNS void AS 'pg_extension', 'set_global_variable' LANGUAGE C STRICT;

-- Get global variable
CREATE OR REPLACE FUNCTION get_global_variable() RETURNS text AS 'pg_extension', 'get_global_variable' LANGUAGE C STRICT;

-- Initialize the extension
SELECT load_global_var_extension();

-- Example usage

-- Set a global variable
SELECT set_global_variable('Hello, world!');

-- Retrieve the global variable
SELECT get_global_variable();


-------------------------------------------------------------


#include "postgres.h"
#include "fmgr.h"
#include "storage/shmem.h"
#include "utils/guc.h"
#include "utils/memutils.h"
#include "utils/builtins.h"

PG_MODULE_MAGIC;

#define MAX_STRING_LENGTH 255

typedef struct
{
    char global_string[MAX_STRING_LENGTH + 1];
} GlobalState;

static GlobalState *global_state = NULL;

void _PG_init(void);
void _PG_fini(void);

PG_FUNCTION_INFO_V1(set_global_variable);
PG_FUNCTION_INFO_V1(get_global_variable);

void _PG_init(void)
{
    bool found;

    global_state = (GlobalState *)ShmemInitStruct("GlobalVariable", sizeof(GlobalState), &found);

    if (!found)
    {
        // Initialize the shared memory if it's a new segment
        memset(global_state, 0, sizeof(GlobalState));
    }
}

void _PG_fini(void)
{
    // Clean up resources if needed
}

Datum set_global_variable(PG_FUNCTION_ARGS)
{
    char *new_value = text_to_cstring(PG_GETARG_TEXT_P(0));
    strncpy(global_state->global_string, new_value, MAX_STRING_LENGTH);
    global_state->global_string[MAX_STRING_LENGTH] = '\0'; // Ensure null-terminated
    PG_RETURN_VOID();
}

Datum get_global_variable(PG_FUNCTION_ARGS)
{
    PG_RETURN_TEXT_P(cstring_to_text(global_state->global_string));
}


PG_FUNCTION_INFO_V1(f_getnodevalue);
PGDLLEXPORT Datum f_getnodevalue(PG_FUNCTION_ARGS) {
        int cst = PG_GETARG_INT32(0);
        ArrayType* in_array = PG_GETARG_ARRAYTYPE_P(1);
        int st = PG_GETARG_INT32(2);
        double df = PG_GETARG_FLOAT8(3);

        float8* arrayvals;
        double res = 0;

        if (st < 0) {
                PG_RETURN_FLOAT8(df);
        };

        if (st > cst) {
                PG_RETURN_NULL();
        };

        arrayvals = (float8*)ARR_DATA_PTR(in_array);
        res = arrayvals[st];
        PG_RETURN_FLOAT8(res);
}


    ArrayType *array1;
    ArrayType *array2;
    int16 elmlen;
    bool elmbyval;
    char elmalign;
    int ndims;
    int *dims;
    int *lbs;
    int nelems;
    float8 *data1;
    float8 *data2;
    float8 *result;
    int i;

    // Check for NULL arrays
    if (PG_ARGISNULL(0) || PG_ARGISNULL(1))
        PG_RETURN_NULL();

    // Get the input arrays
    array1 = PG_GETARG_ARRAYTYPE_P(0);
    array2 = PG_GETARG_ARRAYTYPE_P(1);

    // Check if both arrays are one-dimensional
    if (ARR_NDIM(array1) != 1 || ARR_NDIM(array2) != 1)
        ereport(ERROR, (errcode(ERRCODE_ARRAY_SUBSCRIPT_ERROR),
                        errmsg("arrays must be one-dimensional")));

    // Check if both arrays have the same length
    if (ArrayGetNItems(ARR_NDIM(array1), ARR_DIMS(array1)) != ArrayGetNItems(ARR_NDIM(array2), ARR_DIMS(array2)))
        ereport(ERROR, (errcode(ERRCODE_ARRAY_SUBSCRIPT_ERROR),
                        errmsg("arrays must have the same length")));

    // Extract array element information
    get_typlenbyvalalign(FLOAT8OID, &elmlen, &elmbyval, &elmalign);

    // Pointers to the actual array data
    data1 = (float8 *) ARR_DATA_PTR(array1);
    data2 = (float8 *) ARR_DATA_PTR(array2);
    nelems = ArrayGetNItems(ARR_NDIM(array1), ARR_DIMS(array1));

    // Allocate memory for the result array
    result = (float8 *) palloc(nelems * sizeof(float8));

    // Add corresponding elements from both arrays
    for (i = 0; i < nelems; i++) {
        result[i] = data1[i] + data2[i];
    }

    // Create a new array to store the result
    ArrayType *result_array = construct_array((Datum *) result, nelems, FLOAT8OID, elmlen, elmbyval, elmalign);

    // Clean up and return the new array
    PG_RETURN_ARRAYTYPE_P(result_array);




    Datum      *outArray;
    outArray = (Datum *) palloc(sizeof(Datum) * count1);
    outArray = (Datum *) palloc(sizeof(Datum) * count1);





PGDLLEXPORT Datum f_series_data(PG_FUNCTION_ARGS)
{

    int16 typlen;
    bool typbyval;
    char typalign;
    bool *nulls;

    ArrayType  *in_array = PG_GETARG_ARRAYTYPE_P(0);
    Oid        etype = ARR_ELEMTYPE(in_array);
    ArrayType  *in_map = PG_GETARG_ARRAYTYPE_P(1);
    Datum      *e;
    int        *mapvals;
    int        i;

    int        count1 = sizeof(in_map)/sizeof(mapvals[0]);
    int        count  = 0;
    int        j = 1;
    int        stepno = PG_GETARG_INT32(2);
    Datum      *outArray;
    ArrayType* resultArray;


    get_typlenbyvalalign(etype, &typlen, &typbyval, &typalign);

    deconstruct_array(in_array, etype, typlen, typbyval, typalign, &e, &nulls, &count);

    mapvals = (int *) ARR_DATA_PTR(in_map);


    outArray = (Datum *) palloc(sizeof(Datum) * count1);
    for (i = 0; i < count1; i++)
    {
      if (mapvals[i] == stepno) {
              array_set_element( *outArray, 1, &j, Float8GetDatum(PG_GETARG_FLOAT8(3)), false, -1, typlen,  typbyval, typalign);
              /*outArray[i] = Float8GetDatum(PG_GETARG_FLOAT8(3)); */
      }
      else
      {
              outArray[i] = e[i];
      }
/*       outArray[1]= Float8GetDatum ( count ); */
    }

    resultArray = construct_array(outArray, count, etype, typlen, typbyval, typalign);

    PG_RETURN_ARRAYTYPE_P( resultArray );
}









CREATE OR REPLACE FUNCTION
  f_arr_delta
 ( IN "Arr1" float8[]
 , IN "Arr2" float8[]
 , OUT "return_val" float[])
  AS 'MODULE_PATHNAME', 'f_array_delta'
  LANGUAGE C STRICT IMMUTABLE PARALLEL SAFE;

---------------------------------------------------------------------------------------------------------------------


PG_FUNCTION_INFO_V1(f_array_delta);
PGDLLEXPORT Datum f_array_delta(PG_FUNCTION_ARGS)
{

    ArrayType  *array1 = PG_GETARG_ARRAYTYPE_P(0);
    ArrayType  *array2 = PG_GETARG_ARRAYTYPE_P_COPY(1);
    int16      elmlen;
    bool       elmbyval;
    char       elmalign;
    int        nelems  = ARR_NDIM(array1);
    int        i;
    float8     *data1;
    float8     *data2;


    // Check for NULL arrays
    if (PG_ARGISNULL(0) || PG_ARGISNULL(1))
        PG_RETURN_NULL();

    // Check if both arrays are one-dimensional
    if (ARR_NDIM(array1) != 1 || ARR_NDIM(array2) != 1)
        ereport(ERROR, (errcode(ERRCODE_ARRAY_SUBSCRIPT_ERROR),
                        errmsg("arrays must be one-dimensional")));

    // Check if both arrays have the same length
    if (ArrayGetNItems(ARR_NDIM(array1), ARR_DIMS(array1)) != ArrayGetNItems(ARR_NDIM(array2), ARR_DIMS(array2)))
        ereport(ERROR, (errcode(ERRCODE_ARRAY_SUBSCRIPT_ERROR),
                        errmsg("arrays must have the same length")));

    // Extract array element information
    get_typlenbyvalalign(FLOAT8OID, &elmlen, &elmbyval, &elmalign);

    // Pointers to the actual array data
    data1 = (float8 *) ARR_DATA_PTR(array1);
    data2 = (float8 *) ARR_DATA_PTR(array2);
    nelems = ArrayGetNItems(ARR_NDIM(array1), ARR_DIMS(array1));
    // Add corresponding elements from both arrays
    for (i = 0; i < nelems; i++) {
        data2[i] = data1[i] - data2[i];
     }

    PG_RETURN_ARRAYTYPE_P( array2 );
}