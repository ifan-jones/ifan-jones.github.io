Knuth-Morris-Pratt Algorithm (KMP): text search


#include <stdio.h>
#include <string.h>

void computeLPSArray(char *pattern, int m, int *lps) {
    int len = 0;
    lps[0] = 0;
    int i = 1;
    while (i < m) {
        if (pattern[i] == pattern[len]) {
            len++;
            lps[i] = len;
            i++;
        }
        else {
            if (len != 0) {
                len = lps[len - 1];
            }
            else {
                lps[i] = 0;
                i++;
            }
        }
    }
}

void KMPSearch(char *pattern, char *text) {
    int m = strlen(pattern);
    int n = strlen(text);
    int lps[m];
    computeLPSArray(pattern, m, lps);
    int i = 0;
    int j = 0;
    while (i < n) {
        if (pattern[j] == text[i]) {
            j++;
            i++;
        }
        if (j == m) {
            printf("Pattern found at index %d\n", i - j);
            j = lps[j - 1];
        }
        else if (i < n && pattern[j] != text[i]) {
            if (j != 0)
                j = lps[j - 1];
            else
                i = i + 1;
        }
    }
}

int main() {
    char text[] = "AABAACAADAABAABA";
    char pattern[] = "AABA";
    printf("Text: %s\n", text);
    printf("Pattern: %s\n", pattern);
    KMPSearch(pattern, text);
    return 0;
}



Boyer-Moore algorithm:


#include <stdio.h>
#include <string.h>

#define NO_OF_CHARS 256

// Function to fill the bad character array
void badCharHeuristic(char *str, int size, int badchar[NO_OF_CHARS]) {
    int i;
    for (i = 0; i < NO_OF_CHARS; i++)
        badchar[i] = -1;
    for (i = 0; i < size; i++)
        badchar[(int) str[i]] = i;
}

// Boyer-Moore algorithm for string searching
void search(char *txt, char *pat) {
    int m = strlen(pat);
    int n = strlen(txt);

    int badchar[NO_OF_CHARS];

    badCharHeuristic(pat, m, badchar);

    int s = 0; // s is shift of the pattern with respect to text
    while (s <= (n - m)) {
        int j = m - 1;
        while (j >= 0 && pat[j] == txt[s + j])
            j--;

        if (j < 0) {
            printf("Pattern occurs at shift = %d\n", s);

            // Shift the pattern so that the next character in text aligns with the last occurrence of it in pattern
            s += (s + m < n) ? m - badchar[txt[s + m]] : 1;
        } else {
            // Shift the pattern so that the bad character in text aligns with the last occurrence of it in pattern.
            s += (j - badchar[txt[s + j]] > 0) ? j - badchar[txt[s + j]] : 1;
        }
    }
}

int main() {
    char txt[] = "ABAAABCD";
    char pat[] = "ABC";
    printf("Text: %s\n", txt);
    printf("Pattern: %s\n", pat);
    search(txt, pat);
    return 0;
}
